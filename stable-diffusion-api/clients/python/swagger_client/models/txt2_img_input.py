# coding: utf-8

"""
    Stable Diffusion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Txt2ImgInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_safety': 'bool',
        'ddim_eta': 'float',
        'ddim_steps': 'int',
        'downsampling_factor': 'int',
        'fixed_code': 'bool',
        'height': 'int',
        'latent_channels': 'int',
        'n_iter': 'int',
        'n_samples': 'int',
        'precision': 'str',
        'prompt': 'str',
        'sampler_name': 'str',
        'scale': 'float',
        'seed': 'int',
        'width': 'int'
    }

    attribute_map = {
        'check_safety': 'check_safety',
        'ddim_eta': 'ddim_eta',
        'ddim_steps': 'ddim_steps',
        'downsampling_factor': 'downsampling_factor',
        'fixed_code': 'fixed_code',
        'height': 'height',
        'latent_channels': 'latent_channels',
        'n_iter': 'n_iter',
        'n_samples': 'n_samples',
        'precision': 'precision',
        'prompt': 'prompt',
        'sampler_name': 'sampler_name',
        'scale': 'scale',
        'seed': 'seed',
        'width': 'width'
    }

    def __init__(self, check_safety=None, ddim_eta=None, ddim_steps=None, downsampling_factor=None, fixed_code=None, height=None, latent_channels=None, n_iter=None, n_samples=None, precision=None, prompt=None, sampler_name=None, scale=None, seed=None, width=None, _configuration=None):  # noqa: E501
        """Txt2ImgInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._check_safety = None
        self._ddim_eta = None
        self._ddim_steps = None
        self._downsampling_factor = None
        self._fixed_code = None
        self._height = None
        self._latent_channels = None
        self._n_iter = None
        self._n_samples = None
        self._precision = None
        self._prompt = None
        self._sampler_name = None
        self._scale = None
        self._seed = None
        self._width = None
        self.discriminator = None

        if check_safety is not None:
            self.check_safety = check_safety
        if ddim_eta is not None:
            self.ddim_eta = ddim_eta
        if ddim_steps is not None:
            self.ddim_steps = ddim_steps
        if downsampling_factor is not None:
            self.downsampling_factor = downsampling_factor
        if fixed_code is not None:
            self.fixed_code = fixed_code
        if height is not None:
            self.height = height
        if latent_channels is not None:
            self.latent_channels = latent_channels
        if n_iter is not None:
            self.n_iter = n_iter
        if n_samples is not None:
            self.n_samples = n_samples
        if precision is not None:
            self.precision = precision
        self.prompt = prompt
        if sampler_name is not None:
            self.sampler_name = sampler_name
        if scale is not None:
            self.scale = scale
        if seed is not None:
            self.seed = seed
        if width is not None:
            self.width = width

    @property
    def check_safety(self):
        """Gets the check_safety of this Txt2ImgInput.  # noqa: E501


        :return: The check_safety of this Txt2ImgInput.  # noqa: E501
        :rtype: bool
        """
        return self._check_safety

    @check_safety.setter
    def check_safety(self, check_safety):
        """Sets the check_safety of this Txt2ImgInput.


        :param check_safety: The check_safety of this Txt2ImgInput.  # noqa: E501
        :type: bool
        """

        self._check_safety = check_safety

    @property
    def ddim_eta(self):
        """Gets the ddim_eta of this Txt2ImgInput.  # noqa: E501


        :return: The ddim_eta of this Txt2ImgInput.  # noqa: E501
        :rtype: float
        """
        return self._ddim_eta

    @ddim_eta.setter
    def ddim_eta(self, ddim_eta):
        """Sets the ddim_eta of this Txt2ImgInput.


        :param ddim_eta: The ddim_eta of this Txt2ImgInput.  # noqa: E501
        :type: float
        """

        self._ddim_eta = ddim_eta

    @property
    def ddim_steps(self):
        """Gets the ddim_steps of this Txt2ImgInput.  # noqa: E501


        :return: The ddim_steps of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._ddim_steps

    @ddim_steps.setter
    def ddim_steps(self, ddim_steps):
        """Sets the ddim_steps of this Txt2ImgInput.


        :param ddim_steps: The ddim_steps of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._ddim_steps = ddim_steps

    @property
    def downsampling_factor(self):
        """Gets the downsampling_factor of this Txt2ImgInput.  # noqa: E501


        :return: The downsampling_factor of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._downsampling_factor

    @downsampling_factor.setter
    def downsampling_factor(self, downsampling_factor):
        """Sets the downsampling_factor of this Txt2ImgInput.


        :param downsampling_factor: The downsampling_factor of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._downsampling_factor = downsampling_factor

    @property
    def fixed_code(self):
        """Gets the fixed_code of this Txt2ImgInput.  # noqa: E501


        :return: The fixed_code of this Txt2ImgInput.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_code

    @fixed_code.setter
    def fixed_code(self, fixed_code):
        """Sets the fixed_code of this Txt2ImgInput.


        :param fixed_code: The fixed_code of this Txt2ImgInput.  # noqa: E501
        :type: bool
        """

        self._fixed_code = fixed_code

    @property
    def height(self):
        """Gets the height of this Txt2ImgInput.  # noqa: E501


        :return: The height of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Txt2ImgInput.


        :param height: The height of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def latent_channels(self):
        """Gets the latent_channels of this Txt2ImgInput.  # noqa: E501


        :return: The latent_channels of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._latent_channels

    @latent_channels.setter
    def latent_channels(self, latent_channels):
        """Sets the latent_channels of this Txt2ImgInput.


        :param latent_channels: The latent_channels of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._latent_channels = latent_channels

    @property
    def n_iter(self):
        """Gets the n_iter of this Txt2ImgInput.  # noqa: E501


        :return: The n_iter of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._n_iter

    @n_iter.setter
    def n_iter(self, n_iter):
        """Sets the n_iter of this Txt2ImgInput.


        :param n_iter: The n_iter of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._n_iter = n_iter

    @property
    def n_samples(self):
        """Gets the n_samples of this Txt2ImgInput.  # noqa: E501


        :return: The n_samples of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._n_samples

    @n_samples.setter
    def n_samples(self, n_samples):
        """Sets the n_samples of this Txt2ImgInput.


        :param n_samples: The n_samples of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._n_samples = n_samples

    @property
    def precision(self):
        """Gets the precision of this Txt2ImgInput.  # noqa: E501


        :return: The precision of this Txt2ImgInput.  # noqa: E501
        :rtype: str
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this Txt2ImgInput.


        :param precision: The precision of this Txt2ImgInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["autocast", "full"]  # noqa: E501
        if (self._configuration.client_side_validation and
                precision not in allowed_values):
            raise ValueError(
                "Invalid value for `precision` ({0}), must be one of {1}"  # noqa: E501
                .format(precision, allowed_values)
            )

        self._precision = precision

    @property
    def prompt(self):
        """Gets the prompt of this Txt2ImgInput.  # noqa: E501


        :return: The prompt of this Txt2ImgInput.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this Txt2ImgInput.


        :param prompt: The prompt of this Txt2ImgInput.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and prompt is None:
            raise ValueError("Invalid value for `prompt`, must not be `None`")  # noqa: E501

        self._prompt = prompt

    @property
    def sampler_name(self):
        """Gets the sampler_name of this Txt2ImgInput.  # noqa: E501


        :return: The sampler_name of this Txt2ImgInput.  # noqa: E501
        :rtype: str
        """
        return self._sampler_name

    @sampler_name.setter
    def sampler_name(self, sampler_name):
        """Sets the sampler_name of this Txt2ImgInput.


        :param sampler_name: The sampler_name of this Txt2ImgInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLMS", "DDIM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sampler_name not in allowed_values):
            raise ValueError(
                "Invalid value for `sampler_name` ({0}), must be one of {1}"  # noqa: E501
                .format(sampler_name, allowed_values)
            )

        self._sampler_name = sampler_name

    @property
    def scale(self):
        """Gets the scale of this Txt2ImgInput.  # noqa: E501


        :return: The scale of this Txt2ImgInput.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Txt2ImgInput.


        :param scale: The scale of this Txt2ImgInput.  # noqa: E501
        :type: float
        """

        self._scale = scale

    @property
    def seed(self):
        """Gets the seed of this Txt2ImgInput.  # noqa: E501


        :return: The seed of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this Txt2ImgInput.


        :param seed: The seed of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._seed = seed

    @property
    def width(self):
        """Gets the width of this Txt2ImgInput.  # noqa: E501


        :return: The width of this Txt2ImgInput.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Txt2ImgInput.


        :param width: The width of this Txt2ImgInput.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Txt2ImgInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Txt2ImgInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Txt2ImgInput):
            return True

        return self.to_dict() != other.to_dict()
